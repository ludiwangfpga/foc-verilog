
`timescale 1 ns / 1 ps

	module myip_v15_0_S00_AXI #
	(
		// Users to add parameters here

		// User parameters ends
		// Do not modify the parameters beyond this line

		// Width of S_AXI data bus
		parameter integer C_S_AXI_DATA_WIDTH	= 32,
		// Width of S_AXI address bus
		parameter integer C_S_AXI_ADDR_WIDTH	= 6
	)
	(
		// Users to add ports here

		// User ports ends
		// Do not modify the ports beyond this line

		// Global Clock Signal
		input wire  S_AXI_ACLK,
		// Global Reset Signal. This Signal is Active LOW
		input wire  S_AXI_ARESETN,
		// Write address (issued by master, acceped by Slave)
		input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_AWADDR,
		// Write channel Protection type. This signal indicates the
    		// privilege and security level of the transaction, and whether
    		// the transaction is a data access or an instruction access.
		input wire [2 : 0] S_AXI_AWPROT,
		// Write address valid. This signal indicates that the master signaling
    		// valid write address and control information.
		input wire  S_AXI_AWVALID,
		// Write address ready. This signal indicates that the slave is ready
    		// to accept an address and associated control signals.
		output wire  S_AXI_AWREADY,
		// Write data (issued by master, acceped by Slave) 
		input wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_WDATA,
		// Write strobes. This signal indicates which byte lanes hold
    		// valid data. There is one write strobe bit for each eight
    		// bits of the write data bus.    
		input wire [(C_S_AXI_DATA_WIDTH/8)-1 : 0] S_AXI_WSTRB,
		// Write valid. This signal indicates that valid write
    		// data and strobes are available.
		input wire  S_AXI_WVALID,
		// Write ready. This signal indicates that the slave
    		// can accept the write data.
		output wire  S_AXI_WREADY,
		// Write response. This signal indicates the status
    		// of the write transaction.
		output wire [1 : 0] S_AXI_BRESP,
		// Write response valid. This signal indicates that the channel
    		// is signaling a valid write response.
		output wire  S_AXI_BVALID,
		// Response ready. This signal indicates that the master
    		// can accept a write response.
		input wire  S_AXI_BREADY,
		// Read address (issued by master, acceped by Slave)
		input wire [C_S_AXI_ADDR_WIDTH-1 : 0] S_AXI_ARADDR,
		// Protection type. This signal indicates the privilege
    		// and security level of the transaction, and whether the
    		// transaction is a data access or an instruction access.
		input wire [2 : 0] S_AXI_ARPROT,
		// Read address valid. This signal indicates that the channel
    		// is signaling valid read address and control information.
		input wire  S_AXI_ARVALID,
		// Read address ready. This signal indicates that the slave is
    		// ready to accept an address and associated control signals.
		output wire  S_AXI_ARREADY,
		// Read data (issued by slave)
		output wire [C_S_AXI_DATA_WIDTH-1 : 0] S_AXI_RDATA,
		// Read response. This signal indicates the status of the
    		// read transfer.
		output wire [1 : 0] S_AXI_RRESP,
		// Read valid. This signal indicates that the channel is
    		// signaling the required read data.
		output wire  S_AXI_RVALID,
		// Read ready. This signal indicates that the master can
    		// accept the read data and response information.
		input wire  S_AXI_RREADY
	);

	// AXI4LITE signals
	reg [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_awaddr;
	reg  	axi_awready;
	reg  	axi_wready;
	reg [1 : 0] 	axi_bresp;
	reg  	axi_bvalid;
	reg [C_S_AXI_ADDR_WIDTH-1 : 0] 	axi_araddr;
	reg  	axi_arready;
	reg [C_S_AXI_DATA_WIDTH-1 : 0] 	axi_rdata;
	reg [1 : 0] 	axi_rresp;
	reg  	axi_rvalid;

	// Example-specific design signals
	// local parameter for addressing 32 bit / 64 bit C_S_AXI_DATA_WIDTH
	// ADDR_LSB is used for addressing 32/64 bit registers/memories
	// ADDR_LSB = 2 for 32 bits (n downto 2)
	// ADDR_LSB = 3 for 64 bits (n downto 3)
	localparam integer ADDR_LSB = (C_S_AXI_DATA_WIDTH/32) + 1;
	localparam integer OPT_MEM_ADDR_BITS = 3;
	//----------------------------------------------
	//-- Signals for user logic register space example
	//------------------------------------------------
	//-- Number of Slave Registers 12
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg0;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg1;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg2;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg3;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg4;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg5;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg6;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg7;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg8;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg9;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg10;
	reg [C_S_AXI_DATA_WIDTH-1:0]	slv_reg11;
	wire	 slv_reg_rden;
	wire	 slv_reg_wren;
	reg [C_S_AXI_DATA_WIDTH-1:0]	 reg_data_out;
	integer	 byte_index;
	reg	 aw_en;

	// I/O Connections assignments

	assign S_AXI_AWREADY	= axi_awready;
	assign S_AXI_WREADY	= axi_wready;
	assign S_AXI_BRESP	= axi_bresp;
	assign S_AXI_BVALID	= axi_bvalid;
	assign S_AXI_ARREADY	= axi_arready;
	assign S_AXI_RDATA	= axi_rdata;
	assign S_AXI_RRESP	= axi_rresp;
	assign S_AXI_RVALID	= axi_rvalid;
	// Implement axi_awready generation
	// axi_awready is asserted for one S_AXI_ACLK clock cycle when both
	// S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_awready is
	// de-asserted when reset is low.

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_awready <= 1'b0;
	      aw_en <= 1'b1;
	    end 
	  else
	    begin    
	      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID && aw_en)
	        begin
	          // slave is ready to accept write address when 
	          // there is a valid write address and write data
	          // on the write address and data bus. This design 
	          // expects no outstanding transactions. 
	          axi_awready <= 1'b1;
	          aw_en <= 1'b0;
	        end
	        else if (S_AXI_BREADY && axi_bvalid)
	            begin
	              aw_en <= 1'b1;
	              axi_awready <= 1'b0;
	            end
	      else           
	        begin
	          axi_awready <= 1'b0;
	        end
	    end 
	end       

	// Implement axi_awaddr latching
	// This process is used to latch the address when both 
	// S_AXI_AWVALID and S_AXI_WVALID are valid. 

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_awaddr <= 0;
	    end 
	  else
	    begin    
	      if (~axi_awready && S_AXI_AWVALID && S_AXI_WVALID && aw_en)
	        begin
	          // Write Address latching 
	          axi_awaddr <= S_AXI_AWADDR;
	        end
	    end 
	end       

	// Implement axi_wready generation
	// axi_wready is asserted for one S_AXI_ACLK clock cycle when both
	// S_AXI_AWVALID and S_AXI_WVALID are asserted. axi_wready is 
	// de-asserted when reset is low. 

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_wready <= 1'b0;
	    end 
	  else
	    begin    
	      if (~axi_wready && S_AXI_WVALID && S_AXI_AWVALID && aw_en )
	        begin
	          // slave is ready to accept write data when 
	          // there is a valid write address and write data
	          // on the write address and data bus. This design 
	          // expects no outstanding transactions. 
	          axi_wready <= 1'b1;
	        end
	      else
	        begin
	          axi_wready <= 1'b0;
	        end
	    end 
	end       

	// Implement memory mapped register select and write logic generation
	// The write data is accepted and written to memory mapped registers when
	// axi_awready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted. Write strobes are used to
	// select byte enables of slave registers while writing.
	// These registers are cleared when reset (active low) is applied.
	// Slave register write enable is asserted when valid address and data are available
	// and the slave is ready to accept the write address and write data.
	assign slv_reg_wren = axi_wready && S_AXI_WVALID && axi_awready && S_AXI_AWVALID;

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      slv_reg0 <= 0;
	      slv_reg1 <= 0;
	      slv_reg2 <= 0;
	      slv_reg3 <= 0;
	      slv_reg4 <= 0;
	      slv_reg5 <= 0;
	      slv_reg6 <= 0;
	      slv_reg7 <= 0;
	      slv_reg8 <= 0;
	      slv_reg9 <= 0;
	      slv_reg10 <= 0;
	      slv_reg11 <= 0;
	    end 
	  else begin
	   slv_reg10<= U_q;
       slv_reg11<= U_d;

	    if (slv_reg_wren)
	      begin
	        case ( axi_awaddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB] )
	          4'h0:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 0
	                slv_reg0[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h1:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 1
	                slv_reg1[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h2:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 2
	                slv_reg2[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h3:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 3
	                slv_reg3[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h4:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 4
	                slv_reg4[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h5:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 5
	                slv_reg5[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h6:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 6
	                slv_reg6[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h7:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 7
	                slv_reg7[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h8:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 8
	                slv_reg8[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'h9:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 9
	                slv_reg9[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'hA:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 10
	                slv_reg10[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          4'hB:
	            for ( byte_index = 0; byte_index <= (C_S_AXI_DATA_WIDTH/8)-1; byte_index = byte_index+1 )
	              if ( S_AXI_WSTRB[byte_index] == 1 ) begin
	                // Respective byte enables are asserted as per write strobes 
	                // Slave register 11
	                slv_reg11[(byte_index*8) +: 8] <= S_AXI_WDATA[(byte_index*8) +: 8];
	              end  
	          default : begin
	                      slv_reg0 <= slv_reg0;
	                      slv_reg1 <= slv_reg1;
	                      slv_reg2 <= slv_reg2;
	                      slv_reg3 <= slv_reg3;
	                      slv_reg4 <= slv_reg4;
	                      slv_reg5 <= slv_reg5;
	                      slv_reg6 <= slv_reg6;
	                      slv_reg7 <= slv_reg7;
	                      slv_reg8 <= slv_reg8;
	                      slv_reg9 <= slv_reg9;
	                      slv_reg10 <= slv_reg10;
	                      slv_reg11 <= slv_reg11;
	                    end
	        endcase
	      end
	  end
	end    

	// Implement write response logic generation
	// The write response and response valid signals are asserted by the slave 
	// when axi_wready, S_AXI_WVALID, axi_wready and S_AXI_WVALID are asserted.  
	// This marks the acceptance of address and indicates the status of 
	// write transaction.

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_bvalid  <= 0;
	      axi_bresp   <= 2'b0;
	    end 
	  else
	    begin    
	      if (axi_awready && S_AXI_AWVALID && ~axi_bvalid && axi_wready && S_AXI_WVALID)
	        begin
	          // indicates a valid write response is available
	          axi_bvalid <= 1'b1;
	          axi_bresp  <= 2'b0; // 'OKAY' response 
	        end                   // work error responses in future
	      else
	        begin
	          if (S_AXI_BREADY && axi_bvalid) 
	            //check if bready is asserted while bvalid is high) 
	            //(there is a possibility that bready is always asserted high)   
	            begin
	              axi_bvalid <= 1'b0; 
	            end  
	        end
	    end
	end   

	// Implement axi_arready generation
	// axi_arready is asserted for one S_AXI_ACLK clock cycle when
	// S_AXI_ARVALID is asserted. axi_awready is 
	// de-asserted when reset (active low) is asserted. 
	// The read address is also latched when S_AXI_ARVALID is 
	// asserted. axi_araddr is reset to zero on reset assertion.

	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_arready <= 1'b0;
	      axi_araddr  <= 32'b0;
	    end 
	  else
	    begin    
	      if (~axi_arready && S_AXI_ARVALID)
	        begin
	          // indicates that the slave has acceped the valid read address
	          axi_arready <= 1'b1;
	          // Read address latching
	          axi_araddr  <= S_AXI_ARADDR;
	        end
	      else
	        begin
	          axi_arready <= 1'b0;
	        end
	    end 
	end       

	// Implement axi_arvalid generation
	// axi_rvalid is asserted for one S_AXI_ACLK clock cycle when both 
	// S_AXI_ARVALID and axi_arready are asserted. The slave registers 
	// data are available on the axi_rdata bus at this instance. The 
	// assertion of axi_rvalid marks the validity of read data on the 
	// bus and axi_rresp indicates the status of read transaction.axi_rvalid 
	// is deasserted on reset (active low). axi_rresp and axi_rdata are 
	// cleared to zero on reset (active low).  
	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_rvalid <= 0;
	      axi_rresp  <= 0;
	    end 
	  else
	    begin    
	      if (axi_arready && S_AXI_ARVALID && ~axi_rvalid)
	        begin
	          // Valid read data is available at the read data bus
	          axi_rvalid <= 1'b1;
	          axi_rresp  <= 2'b0; // 'OKAY' response
	        end   
	      else if (axi_rvalid && S_AXI_RREADY)
	        begin
	          // Read data is accepted by the master
	          axi_rvalid <= 1'b0;
	        end                
	    end
	end    

	// Implement memory mapped register select and read logic generation
	// Slave register read enable is asserted when valid address is available
	// and the slave is ready to accept the read address.
	assign slv_reg_rden = axi_arready & S_AXI_ARVALID & ~axi_rvalid;
	always @(*)
	begin
	      // Address decoding for reading registers
	      case ( axi_araddr[ADDR_LSB+OPT_MEM_ADDR_BITS:ADDR_LSB] )
	        4'h0   : reg_data_out <= slv_reg0;
	        4'h1   : reg_data_out <= slv_reg1;
	        4'h2   : reg_data_out <= slv_reg2;
	        4'h3   : reg_data_out <= slv_reg3;
	        4'h4   : reg_data_out <= slv_reg4;
	        4'h5   : reg_data_out <= slv_reg5;
	        4'h6   : reg_data_out <= slv_reg6;
	        4'h7   : reg_data_out <= slv_reg7;
	        4'h8   : reg_data_out <= slv_reg8;
	        4'h9   : reg_data_out <= slv_reg9;
	        4'hA   : reg_data_out <= slv_reg10;
	        4'hB   : reg_data_out <= slv_reg11;
	        default : reg_data_out <= 0;
	      endcase
	end

	// Output register or memory read data
	always @( posedge S_AXI_ACLK )
	begin
	  if ( S_AXI_ARESETN == 1'b0 )
	    begin
	      axi_rdata  <= 0;
	    end 
	  else
	    begin    
	      // When there is a valid read address (S_AXI_ARVALID) with 
	      // acceptance of read address by the slave (axi_arready), 
	      // output the read dada 
	      if (slv_reg_rden)
	        begin
	          axi_rdata <= reg_data_out;     // register read data
	        end   
	    end
	end  
	
	 reg [31:0] sin_table [0:501];
     reg [31:0] cos_table [0:501];
    initial begin
    sin_table[0] = 16'h0000;
    sin_table[1] = 16'h019C;
    sin_table[2] = 16'h0337;
    sin_table[3] = 16'h04D3;
    sin_table[4] = 16'h066E;
    sin_table[5] = 16'h0809;
    sin_table[6] = 16'h09A4;
    sin_table[7] = 16'h0B3F;
    sin_table[8] = 16'h0CD9;
    sin_table[9] = 16'h0E72;
    sin_table[10] = 16'h100B;
    sin_table[11] = 16'h11A3;
    sin_table[12] = 16'h133A;
    sin_table[13] = 16'h14D1;
    sin_table[14] = 16'h1667;
    sin_table[15] = 16'h17FC;
    sin_table[16] = 16'h1990;
    sin_table[17] = 16'h1B23;
    sin_table[18] = 16'h1CB5;
    sin_table[19] = 16'h1E45;
    sin_table[20] = 16'h1FD5;
    sin_table[21] = 16'h2163;
    sin_table[22] = 16'h22F0;
    sin_table[23] = 16'h247B;
    sin_table[24] = 16'h2605;
    sin_table[25] = 16'h278E;
    sin_table[26] = 16'h2914;
    sin_table[27] = 16'h2A99;
    sin_table[28] = 16'h2C1D;
    sin_table[29] = 16'h2D9F;
    sin_table[30] = 16'h2F1E;
    sin_table[31] = 16'h309C;
    sin_table[32] = 16'h3218;
    sin_table[33] = 16'h3392;
    sin_table[34] = 16'h350A;
    sin_table[35] = 16'h3680;
    sin_table[36] = 16'h37F3;
    sin_table[37] = 16'h3964;
    sin_table[38] = 16'h3AD3;
    sin_table[39] = 16'h3C40;
    sin_table[40] = 16'h3DAA;
    sin_table[41] = 16'h3F11;
    sin_table[42] = 16'h4076;
    sin_table[43] = 16'h41D9;
    sin_table[44] = 16'h4338;
    sin_table[45] = 16'h4495;
    sin_table[46] = 16'h45F0;
    sin_table[47] = 16'h4747;
    sin_table[48] = 16'h489C;
    sin_table[49] = 16'h49ED;
    sin_table[50] = 16'h4B3C;
    sin_table[51] = 16'h4C88;
    sin_table[52] = 16'h4DD0;
    sin_table[53] = 16'h4F15;
    sin_table[54] = 16'h5058;
    sin_table[55] = 16'h5196;
    sin_table[56] = 16'h52D2;
    sin_table[57] = 16'h540A;
    sin_table[58] = 16'h553F;
    sin_table[59] = 16'h5671;
    sin_table[60] = 16'h579F;
    sin_table[61] = 16'h58C9;
    sin_table[62] = 16'h59F0;
    sin_table[63] = 16'h5B13;
    sin_table[64] = 16'h5C32;
    sin_table[65] = 16'h5D4E;
    sin_table[66] = 16'h5E66;
    sin_table[67] = 16'h5F7A;
    sin_table[68] = 16'h608B;
    sin_table[69] = 16'h6197;
    sin_table[70] = 16'h629F;
    sin_table[71] = 16'h63A4;
    sin_table[72] = 16'h64A4;
    sin_table[73] = 16'h65A1;
    sin_table[74] = 16'h6699;
    sin_table[75] = 16'h678D;
    sin_table[76] = 16'h687D;
    sin_table[77] = 16'h6969;
    sin_table[78] = 16'h6A50;
    sin_table[79] = 16'h6B33;
    sin_table[80] = 16'h6C12;
    sin_table[81] = 16'h6CED;
    sin_table[82] = 16'h6DC3;
    sin_table[83] = 16'h6E94;
    sin_table[84] = 16'h6F61;
    sin_table[85] = 16'h702A;
    sin_table[86] = 16'h70EE;
    sin_table[87] = 16'h71AE;
    sin_table[88] = 16'h7269;
    sin_table[89] = 16'h731F;
    sin_table[90] = 16'h73D0;
    sin_table[91] = 16'h747D;
    sin_table[92] = 16'h7526;
    sin_table[93] = 16'h75C9;
    sin_table[94] = 16'h7668;
    sin_table[95] = 16'h7702;
    sin_table[96] = 16'h7797;
    sin_table[97] = 16'h7827;
    sin_table[98] = 16'h78B3;
    sin_table[99] = 16'h793A;
    sin_table[100] = 16'h79BB;
    sin_table[101] = 16'h7A38;
    sin_table[102] = 16'h7AB0;
    sin_table[103] = 16'h7B23;
    sin_table[104] = 16'h7B91;
    sin_table[105] = 16'h7BFA;
    sin_table[106] = 16'h7C5D;
    sin_table[107] = 16'h7CBC;
    sin_table[108] = 16'h7D16;
    sin_table[109] = 16'h7D6B;
    sin_table[110] = 16'h7DBB;
    sin_table[111] = 16'h7E05;
    sin_table[112] = 16'h7E4B;
    sin_table[113] = 16'h7E8B;
    sin_table[114] = 16'h7EC6;
    sin_table[115] = 16'h7EFD;
    sin_table[116] = 16'h7F2E;
    sin_table[117] = 16'h7F5A;
    sin_table[118] = 16'h7F80;
    sin_table[119] = 16'h7FA2;
    sin_table[120] = 16'h7FBE;
    sin_table[121] = 16'h7FD6;
    sin_table[122] = 16'h7FE8;
    sin_table[123] = 16'h7FF5;
    sin_table[124] = 16'h7FFC;
    sin_table[125] = 16'h7FFF;
    sin_table[126] = 16'h7FFC;
    sin_table[127] = 16'h7FF5;
    sin_table[128] = 16'h7FE8;
    sin_table[129] = 16'h7FD6;
    sin_table[130] = 16'h7FBE;
    sin_table[131] = 16'h7FA2;
    sin_table[132] = 16'h7F80;
    sin_table[133] = 16'h7F5A;
    sin_table[134] = 16'h7F2E;
    sin_table[135] = 16'h7EFD;
    sin_table[136] = 16'h7EC6;
    sin_table[137] = 16'h7E8B;
    sin_table[138] = 16'h7E4B;
    sin_table[139] = 16'h7E05;
    sin_table[140] = 16'h7DBB;
    sin_table[141] = 16'h7D6B;
    sin_table[142] = 16'h7D16;
    sin_table[143] = 16'h7CBC;
    sin_table[144] = 16'h7C5D;
    sin_table[145] = 16'h7BFA;
    sin_table[146] = 16'h7B91;
    sin_table[147] = 16'h7B23;
    sin_table[148] = 16'h7AB0;
    sin_table[149] = 16'h7A38;
    sin_table[150] = 16'h79BB;
    sin_table[151] = 16'h793A;
    sin_table[152] = 16'h78B3;
    sin_table[153] = 16'h7827;
    sin_table[154] = 16'h7797;
    sin_table[155] = 16'h7702;
    sin_table[156] = 16'h7668;
    sin_table[157] = 16'h75C9;
    sin_table[158] = 16'h7526;
    sin_table[159] = 16'h747D;
    sin_table[160] = 16'h73D0;
    sin_table[161] = 16'h731F;
    sin_table[162] = 16'h7269;
    sin_table[163] = 16'h71AE;
    sin_table[164] = 16'h70EE;
    sin_table[165] = 16'h702A;
    sin_table[166] = 16'h6F61;
    sin_table[167] = 16'h6E94;
    sin_table[168] = 16'h6DC3;
    sin_table[169] = 16'h6CED;
    sin_table[170] = 16'h6C12;
    sin_table[171] = 16'h6B33;
    sin_table[172] = 16'h6A50;
    sin_table[173] = 16'h6969;
    sin_table[174] = 16'h687D;
    sin_table[175] = 16'h678D;
    sin_table[176] = 16'h6699;
    sin_table[177] = 16'h65A1;
    sin_table[178] = 16'h64A4;
    sin_table[179] = 16'h63A4;
    sin_table[180] = 16'h629F;
    sin_table[181] = 16'h6197;
    sin_table[182] = 16'h608B;
    sin_table[183] = 16'h5F7A;
    sin_table[184] = 16'h5E66;
    sin_table[185] = 16'h5D4E;
    sin_table[186] = 16'h5C32;
    sin_table[187] = 16'h5B13;
    sin_table[188] = 16'h59F0;
    sin_table[189] = 16'h58C9;
    sin_table[190] = 16'h579F;
    sin_table[191] = 16'h5671;
    sin_table[192] = 16'h553F;
    sin_table[193] = 16'h540A;
    sin_table[194] = 16'h52D2;
    sin_table[195] = 16'h5196;
    sin_table[196] = 16'h5058;
    sin_table[197] = 16'h4F15;
    sin_table[198] = 16'h4DD0;
    sin_table[199] = 16'h4C88;
    sin_table[200] = 16'h4B3C;
    sin_table[201] = 16'h49ED;
    sin_table[202] = 16'h489C;
    sin_table[203] = 16'h4747;
    sin_table[204] = 16'h45F0;
    sin_table[205] = 16'h4495;
    sin_table[206] = 16'h4338;
    sin_table[207] = 16'h41D9;
    sin_table[208] = 16'h4076;
    sin_table[209] = 16'h3F11;
    sin_table[210] = 16'h3DAA;
    sin_table[211] = 16'h3C40;
    sin_table[212] = 16'h3AD3;
    sin_table[213] = 16'h3964;
    sin_table[214] = 16'h37F3;
    sin_table[215] = 16'h3680;
    sin_table[216] = 16'h350A;
    sin_table[217] = 16'h3392;
    sin_table[218] = 16'h3218;
    sin_table[219] = 16'h309C;
    sin_table[220] = 16'h2F1E;
    sin_table[221] = 16'h2D9F;
    sin_table[222] = 16'h2C1D;
    sin_table[223] = 16'h2A99;
    sin_table[224] = 16'h2914;
    sin_table[225] = 16'h278E;
    sin_table[226] = 16'h2605;
    sin_table[227] = 16'h247B;
    sin_table[228] = 16'h22F0;
    sin_table[229] = 16'h2163;
    sin_table[230] = 16'h1FD5;
    sin_table[231] = 16'h1E45;
    sin_table[232] = 16'h1CB5;
    sin_table[233] = 16'h1B23;
    sin_table[234] = 16'h1990;
    sin_table[235] = 16'h17FC;
    sin_table[236] = 16'h1667;
    sin_table[237] = 16'h14D1;
    sin_table[238] = 16'h133A;
    sin_table[239] = 16'h11A3;
    sin_table[240] = 16'h100B;
    sin_table[241] = 16'h0E72;
    sin_table[242] = 16'h0CD9;
    sin_table[243] = 16'h0B3F;
    sin_table[244] = 16'h09A4;
    sin_table[245] = 16'h0809;
    sin_table[246] = 16'h066E;
    sin_table[247] = 16'h04D3;
    sin_table[248] = 16'h0337;
    sin_table[249] = 16'h019C;
    sin_table[250] = 16'h0000;
    sin_table[251] = 16'hFE64;
    sin_table[252] = 16'hFCC9;
    sin_table[253] = 16'hFB2D;
    sin_table[254] = 16'hF992;
    sin_table[255] = 16'hF7F7;
    sin_table[256] = 16'hF65C;
    sin_table[257] = 16'hF4C1;
    sin_table[258] = 16'hF327;
    sin_table[259] = 16'hF18E;
    sin_table[260] = 16'hEFF5;
    sin_table[261] = 16'hEE5D;
    sin_table[262] = 16'hECC6;
    sin_table[263] = 16'hEB2F;
    sin_table[264] = 16'hE999;
    sin_table[265] = 16'hE804;
    sin_table[266] = 16'hE670;
    sin_table[267] = 16'hE4DD;
    sin_table[268] = 16'hE34B;
    sin_table[269] = 16'hE1BB;
    sin_table[270] = 16'hE02B;
    sin_table[271] = 16'hDE9D;
    sin_table[272] = 16'hDD10;
    sin_table[273] = 16'hDB85;
    sin_table[274] = 16'hD9FB;
    sin_table[275] = 16'hD872;
    sin_table[276] = 16'hD6EC;
    sin_table[277] = 16'hD567;
    sin_table[278] = 16'hD3E3;
    sin_table[279] = 16'hD261;
    sin_table[280] = 16'hD0E2;
    sin_table[281] = 16'hCF64;
    sin_table[282] = 16'hCDE8;
    sin_table[283] = 16'hCC6E;
    sin_table[284] = 16'hCAF6;
    sin_table[285] = 16'hC980;
    sin_table[286] = 16'hC80D;
    sin_table[287] = 16'hC69C;
    sin_table[288] = 16'hC52D;
    sin_table[289] = 16'hC3C0;
    sin_table[290] = 16'hC256;
    sin_table[291] = 16'hC0EF;
    sin_table[292] = 16'hBF8A;
    sin_table[293] = 16'hBE27;
    sin_table[294] = 16'hBCC8;
    sin_table[295] = 16'hBB6B;
    sin_table[296] = 16'hBA10;
    sin_table[297] = 16'hB8B9;
    sin_table[298] = 16'hB764;
    sin_table[299] = 16'hB613;
    sin_table[300] = 16'hB4C4;
    sin_table[301] = 16'hB378;
    sin_table[302] = 16'hB230;
    sin_table[303] = 16'hB0EB;
    sin_table[304] = 16'hAFA8;
    sin_table[305] = 16'hAE6A;
    sin_table[306] = 16'hAD2E;
    sin_table[307] = 16'hABF6;
    sin_table[308] = 16'hAAC1;
    sin_table[309] = 16'hA98F;
    sin_table[310] = 16'hA861;
    sin_table[311] = 16'hA737;
    sin_table[312] = 16'hA610;
    sin_table[313] = 16'hA4ED;
    sin_table[314] = 16'hA3CE;
    sin_table[315] = 16'hA2B2;
    sin_table[316] = 16'hA19A;
    sin_table[317] = 16'hA086;
    sin_table[318] = 16'h9F75;
    sin_table[319] = 16'h9E69;
    sin_table[320] = 16'h9D61;
    sin_table[321] = 16'h9C5C;
    sin_table[322] = 16'h9B5C;
    sin_table[323] = 16'h9A5F;
    sin_table[324] = 16'h9967;
    sin_table[325] = 16'h9873;
    sin_table[326] = 16'h9783;
    sin_table[327] = 16'h9697;
    sin_table[328] = 16'h95B0;
    sin_table[329] = 16'h94CD;
    sin_table[330] = 16'h93EE;
    sin_table[331] = 16'h9313;
    sin_table[332] = 16'h923D;
    sin_table[333] = 16'h916C;
    sin_table[334] = 16'h909F;
    sin_table[335] = 16'h8FD6;
    sin_table[336] = 16'h8F12;
    sin_table[337] = 16'h8E52;
    sin_table[338] = 16'h8D97;
    sin_table[339] = 16'h8CE1;
    sin_table[340] = 16'h8C30;
    sin_table[341] = 16'h8B83;
    sin_table[342] = 16'h8ADA;
    sin_table[343] = 16'h8A37;
    sin_table[344] = 16'h8998;
    sin_table[345] = 16'h88FE;
    sin_table[346] = 16'h8869;
    sin_table[347] = 16'h87D9;
    sin_table[348] = 16'h874D;
    sin_table[349] = 16'h86C6;
    sin_table[350] = 16'h8645;
    sin_table[351] = 16'h85C8;
    sin_table[352] = 16'h8550;
    sin_table[353] = 16'h84DD;
    sin_table[354] = 16'h846F;
    sin_table[355] = 16'h8406;
    sin_table[356] = 16'h83A3;
    sin_table[357] = 16'h8344;
    sin_table[358] = 16'h82EA;
    sin_table[359] = 16'h8295;
    sin_table[360] = 16'h8245;
    sin_table[361] = 16'h81FB;
    sin_table[362] = 16'h81B5;
    sin_table[363] = 16'h8175;
    sin_table[364] = 16'h813A;
    sin_table[365] = 16'h8103;
    sin_table[366] = 16'h80D2;
    sin_table[367] = 16'h80A6;
    sin_table[368] = 16'h8080;
    sin_table[369] = 16'h805E;
    sin_table[370] = 16'h8042;
    sin_table[371] = 16'h802A;
    sin_table[372] = 16'h8018;
    sin_table[373] = 16'h800B;
    sin_table[374] = 16'h8004;
    sin_table[375] = 16'h8001;
    sin_table[376] = 16'h8004;
    sin_table[377] = 16'h800B;
    sin_table[378] = 16'h8018;
    sin_table[379] = 16'h802A;
    sin_table[380] = 16'h8042;
    sin_table[381] = 16'h805E;
    sin_table[382] = 16'h8080;
    sin_table[383] = 16'h80A6;
    sin_table[384] = 16'h80D2;
    sin_table[385] = 16'h8103;
    sin_table[386] = 16'h813A;
    sin_table[387] = 16'h8175;
    sin_table[388] = 16'h81B5;
    sin_table[389] = 16'h81FB;
    sin_table[390] = 16'h8245;
    sin_table[391] = 16'h8295;
    sin_table[392] = 16'h82EA;
    sin_table[393] = 16'h8344;
    sin_table[394] = 16'h83A3;
    sin_table[395] = 16'h8406;
    sin_table[396] = 16'h846F;
    sin_table[397] = 16'h84DD;
    sin_table[398] = 16'h8550;
    sin_table[399] = 16'h85C8;
    sin_table[400] = 16'h8645;
    sin_table[401] = 16'h86C6;
    sin_table[402] = 16'h874D;
    sin_table[403] = 16'h87D9;
    sin_table[404] = 16'h8869;
    sin_table[405] = 16'h88FE;
    sin_table[406] = 16'h8998;
    sin_table[407] = 16'h8A37;
    sin_table[408] = 16'h8ADA;
    sin_table[409] = 16'h8B83;
    sin_table[410] = 16'h8C30;
    sin_table[411] = 16'h8CE1;
    sin_table[412] = 16'h8D97;
    sin_table[413] = 16'h8E52;
    sin_table[414] = 16'h8F12;
    sin_table[415] = 16'h8FD6;
    sin_table[416] = 16'h909F;
    sin_table[417] = 16'h916C;
    sin_table[418] = 16'h923D;
    sin_table[419] = 16'h9313;
    sin_table[420] = 16'h93EE;
    sin_table[421] = 16'h94CD;
    sin_table[422] = 16'h95B0;
    sin_table[423] = 16'h9697;
    sin_table[424] = 16'h9783;
    sin_table[425] = 16'h9873;
    sin_table[426] = 16'h9967;
    sin_table[427] = 16'h9A5F;
    sin_table[428] = 16'h9B5C;
    sin_table[429] = 16'h9C5C;
    sin_table[430] = 16'h9D61;
    sin_table[431] = 16'h9E69;
    sin_table[432] = 16'h9F75;
    sin_table[433] = 16'hA086;
    sin_table[434] = 16'hA19A;
    sin_table[435] = 16'hA2B2;
    sin_table[436] = 16'hA3CE;
    sin_table[437] = 16'hA4ED;
    sin_table[438] = 16'hA610;
    sin_table[439] = 16'hA737;
    sin_table[440] = 16'hA861;
    sin_table[441] = 16'hA98F;
    sin_table[442] = 16'hAAC1;
    sin_table[443] = 16'hABF6;
    sin_table[444] = 16'hAD2E;
    sin_table[445] = 16'hAE6A;
    sin_table[446] = 16'hAFA8;
    sin_table[447] = 16'hB0EB;
    sin_table[448] = 16'hB230;
    sin_table[449] = 16'hB378;
    sin_table[450] = 16'hB4C4;
    sin_table[451] = 16'hB613;
    sin_table[452] = 16'hB764;
    sin_table[453] = 16'hB8B9;
    sin_table[454] = 16'hBA10;
    sin_table[455] = 16'hBB6B;
    sin_table[456] = 16'hBCC8;
    sin_table[457] = 16'hBE27;
    sin_table[458] = 16'hBF8A;
    sin_table[459] = 16'hC0EF;
    sin_table[460] = 16'hC256;
    sin_table[461] = 16'hC3C0;
    sin_table[462] = 16'hC52D;
    sin_table[463] = 16'hC69C;
    sin_table[464] = 16'hC80D;
    sin_table[465] = 16'hC980;
    sin_table[466] = 16'hCAF6;
    sin_table[467] = 16'hCC6E;
    sin_table[468] = 16'hCDE8;
    sin_table[469] = 16'hCF64;
    sin_table[470] = 16'hD0E2;
    sin_table[471] = 16'hD261;
    sin_table[472] = 16'hD3E3;
    sin_table[473] = 16'hD567;
    sin_table[474] = 16'hD6EC;
    sin_table[475] = 16'hD872;
    sin_table[476] = 16'hD9FB;
    sin_table[477] = 16'hDB85;
    sin_table[478] = 16'hDD10;
    sin_table[479] = 16'hDE9D;
    sin_table[480] = 16'hE02B;
    sin_table[481] = 16'hE1BB;
    sin_table[482] = 16'hE34B;
    sin_table[483] = 16'hE4DD;
    sin_table[484] = 16'hE670;
    sin_table[485] = 16'hE804;
    sin_table[486] = 16'hE999;
    sin_table[487] = 16'hEB2F;
    sin_table[488] = 16'hECC6;
    sin_table[489] = 16'hEE5D;
    sin_table[490] = 16'hEFF5;
    sin_table[491] = 16'hF18E;
    sin_table[492] = 16'hF327;
    sin_table[493] = 16'hF4C1;
    sin_table[494] = 16'hF65C;
    sin_table[495] = 16'hF7F7;
    sin_table[496] = 16'hF992;
    sin_table[497] = 16'hFB2D;
    sin_table[498] = 16'hFCC9;
    sin_table[499] = 16'hFE64;
    sin_table[500] = 16'h0000;
    
    cos_table[0] = 16'h7FFF;
    cos_table[1] = 16'h7FFC;
    cos_table[2] = 16'h7FF5;
    cos_table[3] = 16'h7FE8;
    cos_table[4] = 16'h7FD6;
    cos_table[5] = 16'h7FBE;
    cos_table[6] = 16'h7FA2;
    cos_table[7] = 16'h7F80;
    cos_table[8] = 16'h7F5A;
    cos_table[9] = 16'h7F2E;
    cos_table[10] = 16'h7EFD;
    cos_table[11] = 16'h7EC6;
    cos_table[12] = 16'h7E8B;
    cos_table[13] = 16'h7E4B;
    cos_table[14] = 16'h7E05;
    cos_table[15] = 16'h7DBB;
    cos_table[16] = 16'h7D6B;
    cos_table[17] = 16'h7D16;
    cos_table[18] = 16'h7CBC;
    cos_table[19] = 16'h7C5D;
    cos_table[20] = 16'h7BFA;
    cos_table[21] = 16'h7B91;
    cos_table[22] = 16'h7B23;
    cos_table[23] = 16'h7AB0;
    cos_table[24] = 16'h7A38;
    cos_table[25] = 16'h79BB;
    cos_table[26] = 16'h793A;
    cos_table[27] = 16'h78B3;
    cos_table[28] = 16'h7827;
    cos_table[29] = 16'h7797;
    cos_table[30] = 16'h7702;
    cos_table[31] = 16'h7668;
    cos_table[32] = 16'h75C9;
    cos_table[33] = 16'h7526;
    cos_table[34] = 16'h747D;
    cos_table[35] = 16'h73D0;
    cos_table[36] = 16'h731F;
    cos_table[37] = 16'h7269;
    cos_table[38] = 16'h71AE;
    cos_table[39] = 16'h70EE;
    cos_table[40] = 16'h702A;
    cos_table[41] = 16'h6F61;
    cos_table[42] = 16'h6E94;
    cos_table[43] = 16'h6DC3;
    cos_table[44] = 16'h6CED;
    cos_table[45] = 16'h6C12;
    cos_table[46] = 16'h6B33;
    cos_table[47] = 16'h6A50;
    cos_table[48] = 16'h6969;
    cos_table[49] = 16'h687D;
    cos_table[50] = 16'h678D;
    cos_table[51] = 16'h6699;
    cos_table[52] = 16'h65A1;
    cos_table[53] = 16'h64A4;
    cos_table[54] = 16'h63A4;
    cos_table[55] = 16'h629F;
    cos_table[56] = 16'h6197;
    cos_table[57] = 16'h608B;
    cos_table[58] = 16'h5F7A;
    cos_table[59] = 16'h5E66;
    cos_table[60] = 16'h5D4E;
    cos_table[61] = 16'h5C32;
    cos_table[62] = 16'h5B13;
    cos_table[63] = 16'h59F0;
    cos_table[64] = 16'h58C9;
    cos_table[65] = 16'h579F;
    cos_table[66] = 16'h5671;
    cos_table[67] = 16'h553F;
    cos_table[68] = 16'h540A;
    cos_table[69] = 16'h52D2;
    cos_table[70] = 16'h5196;
    cos_table[71] = 16'h5058;
    cos_table[72] = 16'h4F15;
    cos_table[73] = 16'h4DD0;
    cos_table[74] = 16'h4C88;
    cos_table[75] = 16'h4B3C;
    cos_table[76] = 16'h49ED;
    cos_table[77] = 16'h489C;
    cos_table[78] = 16'h4747;
    cos_table[79] = 16'h45F0;
    cos_table[80] = 16'h4495;
    cos_table[81] = 16'h4338;
    cos_table[82] = 16'h41D9;
    cos_table[83] = 16'h4076;
    cos_table[84] = 16'h3F11;
    cos_table[85] = 16'h3DAA;
    cos_table[86] = 16'h3C40;
    cos_table[87] = 16'h3AD3;
    cos_table[88] = 16'h3964;
    cos_table[89] = 16'h37F3;
    cos_table[90] = 16'h3680;
    cos_table[91] = 16'h350A;
    cos_table[92] = 16'h3392;
    cos_table[93] = 16'h3218;
    cos_table[94] = 16'h309C;
    cos_table[95] = 16'h2F1E;
    cos_table[96] = 16'h2D9F;
    cos_table[97] = 16'h2C1D;
    cos_table[98] = 16'h2A99;
    cos_table[99] = 16'h2914;
    cos_table[100] = 16'h278E;
    cos_table[101] = 16'h2605;
    cos_table[102] = 16'h247B;
    cos_table[103] = 16'h22F0;
    cos_table[104] = 16'h2163;
    cos_table[105] = 16'h1FD5;
    cos_table[106] = 16'h1E45;
    cos_table[107] = 16'h1CB5;
    cos_table[108] = 16'h1B23;
    cos_table[109] = 16'h1990;
    cos_table[110] = 16'h17FC;
    cos_table[111] = 16'h1667;
    cos_table[112] = 16'h14D1;
    cos_table[113] = 16'h133A;
    cos_table[114] = 16'h11A3;
    cos_table[115] = 16'h100B;
    cos_table[116] = 16'h0E72;
    cos_table[117] = 16'h0CD9;
    cos_table[118] = 16'h0B3F;
    cos_table[119] = 16'h09A4;
    cos_table[120] = 16'h0809;
    cos_table[121] = 16'h066E;
    cos_table[122] = 16'h04D3;
    cos_table[123] = 16'h0337;
    cos_table[124] = 16'h019C;
    cos_table[125] = 16'h0000;
    cos_table[126] = 16'hFE64;
    cos_table[127] = 16'hFCC9;
    cos_table[128] = 16'hFB2D;
    cos_table[129] = 16'hF992;
    cos_table[130] = 16'hF7F7;
    cos_table[131] = 16'hF65C;
    cos_table[132] = 16'hF4C1;
    cos_table[133] = 16'hF327;
    cos_table[134] = 16'hF18E;
    cos_table[135] = 16'hEFF5;
    cos_table[136] = 16'hEE5D;
    cos_table[137] = 16'hECC6;
    cos_table[138] = 16'hEB2F;
    cos_table[139] = 16'hE999;
    cos_table[140] = 16'hE804;
    cos_table[141] = 16'hE670;
    cos_table[142] = 16'hE4DD;
    cos_table[143] = 16'hE34B;
    cos_table[144] = 16'hE1BB;
    cos_table[145] = 16'hE02B;
    cos_table[146] = 16'hDE9D;
    cos_table[147] = 16'hDD10;
    cos_table[148] = 16'hDB85;
    cos_table[149] = 16'hD9FB;
    cos_table[150] = 16'hD872;
    cos_table[151] = 16'hD6EC;
    cos_table[152] = 16'hD567;
    cos_table[153] = 16'hD3E3;
    cos_table[154] = 16'hD261;
    cos_table[155] = 16'hD0E2;
    cos_table[156] = 16'hCF64;
    cos_table[157] = 16'hCDE8;
    cos_table[158] = 16'hCC6E;
    cos_table[159] = 16'hCAF6;
    cos_table[160] = 16'hC980;
    cos_table[161] = 16'hC80D;
    cos_table[162] = 16'hC69C;
    cos_table[163] = 16'hC52D;
    cos_table[164] = 16'hC3C0;
    cos_table[165] = 16'hC256;
    cos_table[166] = 16'hC0EF;
    cos_table[167] = 16'hBF8A;
    cos_table[168] = 16'hBE27;
    cos_table[169] = 16'hBCC8;
    cos_table[170] = 16'hBB6B;
    cos_table[171] = 16'hBA10;
    cos_table[172] = 16'hB8B9;
    cos_table[173] = 16'hB764;
    cos_table[174] = 16'hB613;
    cos_table[175] = 16'hB4C4;
    cos_table[176] = 16'hB378;
    cos_table[177] = 16'hB230;
    cos_table[178] = 16'hB0EB;
    cos_table[179] = 16'hAFA8;
    cos_table[180] = 16'hAE6A;
    cos_table[181] = 16'hAD2E;
    cos_table[182] = 16'hABF6;
    cos_table[183] = 16'hAAC1;
    cos_table[184] = 16'hA98F;
    cos_table[185] = 16'hA861;
    cos_table[186] = 16'hA737;
    cos_table[187] = 16'hA610;
    cos_table[188] = 16'hA4ED;
    cos_table[189] = 16'hA3CE;
    cos_table[190] = 16'hA2B2;
    cos_table[191] = 16'hA19A;
    cos_table[192] = 16'hA086;
    cos_table[193] = 16'h9F75;
    cos_table[194] = 16'h9E69;
    cos_table[195] = 16'h9D61;
    cos_table[196] = 16'h9C5C;
    cos_table[197] = 16'h9B5C;
    cos_table[198] = 16'h9A5F;
    cos_table[199] = 16'h9967;
    cos_table[200] = 16'h9873;
    cos_table[201] = 16'h9783;
    cos_table[202] = 16'h9697;
    cos_table[203] = 16'h95B0;
    cos_table[204] = 16'h94CD;
    cos_table[205] = 16'h93EE;
    cos_table[206] = 16'h9313;
    cos_table[207] = 16'h923D;
    cos_table[208] = 16'h916C;
    cos_table[209] = 16'h909F;
    cos_table[210] = 16'h8FD6;
    cos_table[211] = 16'h8F12;
    cos_table[212] = 16'h8E52;
    cos_table[213] = 16'h8D97;
    cos_table[214] = 16'h8CE1;
    cos_table[215] = 16'h8C30;
    cos_table[216] = 16'h8B83;
    cos_table[217] = 16'h8ADA;
    cos_table[218] = 16'h8A37;
    cos_table[219] = 16'h8998;
    cos_table[220] = 16'h88FE;
    cos_table[221] = 16'h8869;
    cos_table[222] = 16'h87D9;
    cos_table[223] = 16'h874D;
    cos_table[224] = 16'h86C6;
    cos_table[225] = 16'h8645;
    cos_table[226] = 16'h85C8;
    cos_table[227] = 16'h8550;
    cos_table[228] = 16'h84DD;
    cos_table[229] = 16'h846F;
    cos_table[230] = 16'h8406;
    cos_table[231] = 16'h83A3;
    cos_table[232] = 16'h8344;
    cos_table[233] = 16'h82EA;
    cos_table[234] = 16'h8295;
    cos_table[235] = 16'h8245;
    cos_table[236] = 16'h81FB;
    cos_table[237] = 16'h81B5;
    cos_table[238] = 16'h8175;
    cos_table[239] = 16'h813A;
    cos_table[240] = 16'h8103;
    cos_table[241] = 16'h80D2;
    cos_table[242] = 16'h80A6;
    cos_table[243] = 16'h8080;
    cos_table[244] = 16'h805E;
    cos_table[245] = 16'h8042;
    cos_table[246] = 16'h802A;
    cos_table[247] = 16'h8018;
    cos_table[248] = 16'h800B;
    cos_table[249] = 16'h8004;
    cos_table[250] = 16'h8001;
    cos_table[251] = 16'h8004;
    cos_table[252] = 16'h800B;
    cos_table[253] = 16'h8018;
    cos_table[254] = 16'h802A;
    cos_table[255] = 16'h8042;
    cos_table[256] = 16'h805E;
    cos_table[257] = 16'h8080;
    cos_table[258] = 16'h80A6;
    cos_table[259] = 16'h80D2;
    cos_table[260] = 16'h8103;
    cos_table[261] = 16'h813A;
    cos_table[262] = 16'h8175;
    cos_table[263] = 16'h81B5;
    cos_table[264] = 16'h81FB;
    cos_table[265] = 16'h8245;
    cos_table[266] = 16'h8295;
    cos_table[267] = 16'h82EA;
    cos_table[268] = 16'h8344;
    cos_table[269] = 16'h83A3;
    cos_table[270] = 16'h8406;
    cos_table[271] = 16'h846F;
    cos_table[272] = 16'h84DD;
    cos_table[273] = 16'h8550;
    cos_table[274] = 16'h85C8;
    cos_table[275] = 16'h8645;
    cos_table[276] = 16'h86C6;
    cos_table[277] = 16'h874D;
    cos_table[278] = 16'h87D9;
    cos_table[279] = 16'h8869;
    cos_table[280] = 16'h88FE;
    cos_table[281] = 16'h8998;
    cos_table[282] = 16'h8A37;
    cos_table[283] = 16'h8ADA;
    cos_table[284] = 16'h8B83;
    cos_table[285] = 16'h8C30;
    cos_table[286] = 16'h8CE1;
    cos_table[287] = 16'h8D97;
    cos_table[288] = 16'h8E52;
    cos_table[289] = 16'h8F12;
    cos_table[290] = 16'h8FD6;
    cos_table[291] = 16'h909F;
    cos_table[292] = 16'h916C;
    cos_table[293] = 16'h923D;
    cos_table[294] = 16'h9313;
    cos_table[295] = 16'h93EE;
    cos_table[296] = 16'h94CD;
    cos_table[297] = 16'h95B0;
    cos_table[298] = 16'h9697;
    cos_table[299] = 16'h9783;
    cos_table[300] = 16'h9873;
    cos_table[301] = 16'h9967;
    cos_table[302] = 16'h9A5F;
    cos_table[303] = 16'h9B5C;
    cos_table[304] = 16'h9C5C;
    cos_table[305] = 16'h9D61;
    cos_table[306] = 16'h9E69;
    cos_table[307] = 16'h9F75;
    cos_table[308] = 16'hA086;
    cos_table[309] = 16'hA19A;
    cos_table[310] = 16'hA2B2;
    cos_table[311] = 16'hA3CE;
    cos_table[312] = 16'hA4ED;
    cos_table[313] = 16'hA610;
    cos_table[314] = 16'hA737;
    cos_table[315] = 16'hA861;
    cos_table[316] = 16'hA98F;
    cos_table[317] = 16'hAAC1;
    cos_table[318] = 16'hABF6;
    cos_table[319] = 16'hAD2E;
    cos_table[320] = 16'hAE6A;
    cos_table[321] = 16'hAFA8;
    cos_table[322] = 16'hB0EB;
    cos_table[323] = 16'hB230;
    cos_table[324] = 16'hB378;
    cos_table[325] = 16'hB4C4;
    cos_table[326] = 16'hB613;
    cos_table[327] = 16'hB764;
    cos_table[328] = 16'hB8B9;
    cos_table[329] = 16'hBA10;
    cos_table[330] = 16'hBB6B;
    cos_table[331] = 16'hBCC8;
    cos_table[332] = 16'hBE27;
    cos_table[333] = 16'hBF8A;
    cos_table[334] = 16'hC0EF;
    cos_table[335] = 16'hC256;
    cos_table[336] = 16'hC3C0;
    cos_table[337] = 16'hC52D;
    cos_table[338] = 16'hC69C;
    cos_table[339] = 16'hC80D;
    cos_table[340] = 16'hC980;
    cos_table[341] = 16'hCAF6;
    cos_table[342] = 16'hCC6E;
    cos_table[343] = 16'hCDE8;
    cos_table[344] = 16'hCF64;
    cos_table[345] = 16'hD0E2;
    cos_table[346] = 16'hD261;
    cos_table[347] = 16'hD3E3;
    cos_table[348] = 16'hD567;
    cos_table[349] = 16'hD6EC;
    cos_table[350] = 16'hD872;
    cos_table[351] = 16'hD9FB;
    cos_table[352] = 16'hDB85;
    cos_table[353] = 16'hDD10;
    cos_table[354] = 16'hDE9D;
    cos_table[355] = 16'hE02B;
    cos_table[356] = 16'hE1BB;
    cos_table[357] = 16'hE34B;
    cos_table[358] = 16'hE4DD;
    cos_table[359] = 16'hE670;
    cos_table[360] = 16'hE804;
    cos_table[361] = 16'hE999;
    cos_table[362] = 16'hEB2F;
    cos_table[363] = 16'hECC6;
    cos_table[364] = 16'hEE5D;
    cos_table[365] = 16'hEFF5;
    cos_table[366] = 16'hF18E;
    cos_table[367] = 16'hF327;
    cos_table[368] = 16'hF4C1;
    cos_table[369] = 16'hF65C;
    cos_table[370] = 16'hF7F7;
    cos_table[371] = 16'hF992;
    cos_table[372] = 16'hFB2D;
    cos_table[373] = 16'hFCC9;
    cos_table[374] = 16'hFE64;
    cos_table[375] = 16'h0000;
    cos_table[376] = 16'h019C;
    cos_table[377] = 16'h0337;
    cos_table[378] = 16'h04D3;
    cos_table[379] = 16'h066E;
    cos_table[380] = 16'h0809;
    cos_table[381] = 16'h09A4;
    cos_table[382] = 16'h0B3F;
    cos_table[383] = 16'h0CD9;
    cos_table[384] = 16'h0E72;
    cos_table[385] = 16'h100B;
    cos_table[386] = 16'h11A3;
    cos_table[387] = 16'h133A;
    cos_table[388] = 16'h14D1;
    cos_table[389] = 16'h1667;
    cos_table[390] = 16'h17FC;
    cos_table[391] = 16'h1990;
    cos_table[392] = 16'h1B23;
    cos_table[393] = 16'h1CB5;
    cos_table[394] = 16'h1E45;
    cos_table[395] = 16'h1FD5;
    cos_table[396] = 16'h2163;
    cos_table[397] = 16'h22F0;
    cos_table[398] = 16'h247B;
    cos_table[399] = 16'h2605;
    cos_table[400] = 16'h278E;
    cos_table[401] = 16'h2914;
    cos_table[402] = 16'h2A99;
    cos_table[403] = 16'h2C1D;
    cos_table[404] = 16'h2D9F;
    cos_table[405] = 16'h2F1E;
    cos_table[406] = 16'h309C;
    cos_table[407] = 16'h3218;
    cos_table[408] = 16'h3392;
    cos_table[409] = 16'h350A;
    cos_table[410] = 16'h3680;
    cos_table[411] = 16'h37F3;
    cos_table[412] = 16'h3964;
    cos_table[413] = 16'h3AD3;
    cos_table[414] = 16'h3C40;
    cos_table[415] = 16'h3DAA;
    cos_table[416] = 16'h3F11;
    cos_table[417] = 16'h4076;
    cos_table[418] = 16'h41D9;
    cos_table[419] = 16'h4338;
    cos_table[420] = 16'h4495;
    cos_table[421] = 16'h45F0;
    cos_table[422] = 16'h4747;
    cos_table[423] = 16'h489C;
    cos_table[424] = 16'h49ED;
    cos_table[425] = 16'h4B3C;
    cos_table[426] = 16'h4C88;
    cos_table[427] = 16'h4DD0;
    cos_table[428] = 16'h4F15;
    cos_table[429] = 16'h5058;
    cos_table[430] = 16'h5196;
    cos_table[431] = 16'h52D2;
    cos_table[432] = 16'h540A;
    cos_table[433] = 16'h553F;
    cos_table[434] = 16'h5671;
    cos_table[435] = 16'h579F;
    cos_table[436] = 16'h58C9;
    cos_table[437] = 16'h59F0;
    cos_table[438] = 16'h5B13;
    cos_table[439] = 16'h5C32;
    cos_table[440] = 16'h5D4E;
    cos_table[441] = 16'h5E66;
    cos_table[442] = 16'h5F7A;
    cos_table[443] = 16'h608B;
    cos_table[444] = 16'h6197;
    cos_table[445] = 16'h629F;
    cos_table[446] = 16'h63A4;
    cos_table[447] = 16'h64A4;
    cos_table[448] = 16'h65A1;
    cos_table[449] = 16'h6699;
    cos_table[450] = 16'h678D;
    cos_table[451] = 16'h687D;
    cos_table[452] = 16'h6969;
    cos_table[453] = 16'h6A50;
    cos_table[454] = 16'h6B33;
    cos_table[455] = 16'h6C12;
    cos_table[456] = 16'h6CED;
    cos_table[457] = 16'h6DC3;
    cos_table[458] = 16'h6E94;
    cos_table[459] = 16'h6F61;
    cos_table[460] = 16'h702A;
    cos_table[461] = 16'h70EE;
    cos_table[462] = 16'h71AE;
    cos_table[463] = 16'h7269;
    cos_table[464] = 16'h731F;
    cos_table[465] = 16'h73D0;
    cos_table[466] = 16'h747D;
    cos_table[467] = 16'h7526;
    cos_table[468] = 16'h75C9;
    cos_table[469] = 16'h7668;
    cos_table[470] = 16'h7702;
    cos_table[471] = 16'h7797;
    cos_table[472] = 16'h7827;
    cos_table[473] = 16'h78B3;
    cos_table[474] = 16'h793A;
    cos_table[475] = 16'h79BB;
    cos_table[476] = 16'h7A38;
    cos_table[477] = 16'h7AB0;
    cos_table[478] = 16'h7B23;
    cos_table[479] = 16'h7B91;
    cos_table[480] = 16'h7BFA;
    cos_table[481] = 16'h7C5D;
    cos_table[482] = 16'h7CBC;
    cos_table[483] = 16'h7D16;
    cos_table[484] = 16'h7D6B;
    cos_table[485] = 16'h7DBB;
    cos_table[486] = 16'h7E05;
    cos_table[487] = 16'h7E4B;
    cos_table[488] = 16'h7E8B;
    cos_table[489] = 16'h7EC6;
    cos_table[490] = 16'h7EFD;
    cos_table[491] = 16'h7F2E;
    cos_table[492] = 16'h7F5A;
    cos_table[493] = 16'h7F80;
    cos_table[494] = 16'h7FA2;
    cos_table[495] = 16'h7FBE;
    cos_table[496] = 16'h7FD6;
    cos_table[497] = 16'h7FE8;
    cos_table[498] = 16'h7FF5;
    cos_table[499] = 16'h7FFC;
    cos_table[500] = 16'h7FFF;
    end  
    wire signed [15:0] Iaa,Ibb,Icc;           
     wire signed [15:0] angleout;
     wire signed [31:0] cosangle,sinangle;
     wire  [15:0] TC,KPP,KII,KD;
     wire signed [15:0] EQ,ED;              
     reg  signed [15:0] iq,id;
     reg  signed [15:0] IIq,IId;
     reg  signed [15:0] U_q,U_d;
     reg  signed [15:0] target_torque;
     reg  signed [15:0] error_q,error_d;
     reg  signed [15:0] integral_of_error_q,integral_of_error_d;
     reg  signed [15:0] decimal_sin,decimal_cos;
     reg  signed [15:0] iq_stage1, id_stage1,iq_stage2, id_stage2;
     foc foc_inst(
              // foc input
.ia(slv_reg0),
.ib(slv_reg1),
.ic(slv_reg2),                 
.angle(slv_reg3),
//PID input
.Torque_Constant(slv_reg4),
.Kp(slv_reg5),
.Ki(slv_reg6),
.Kd(slv_reg7),
.error_q(slv_reg8),
.error_d(slv_reg9),
//get data
.Iaa(Iaa),                   
.Ibb(Ibb),
.Icc(Icc),
.angleout(angleout),
//.sinangle(sinangle),
//.cosangle(cosangle),
.ED(ED),
.EQ(EQ),
.TC(TC),
.KPP(KPP),
.KII(KII) );                                     
always @(posedge S_AXI_ACLK) begin
        decimal_cos <= 2 * (cos_table[angleout] & 16'hFFFF) * 10000 / 65536; 
        iq_stage1 <=  Iaa*decimal_cos;
        id_stage1 <=  Ibb*decimal_cos; 
       // target_torque <= TC * 60;                  
              end
always @(posedge S_AXI_ACLK) begin
        decimal_sin <= 2 * (sin_table[angleout] & 16'hFFFF) * 10000 / 65536;
        iq_stage2 <=  Iaa*decimal_sin;
        id_stage2 <=  Ibb*decimal_sin;                 
               end
always @(posedge S_AXI_ACLK) begin
iq <= iq_stage1 - id_stage2;
id <= id_stage1 + iq_stage2;
IIq <= -id/2 + 86602*iq/100000;
IId <= -id/2 - 86602*iq/100000;
end
always @(posedge S_AXI_ACLK) begin
//error_q <= target_torque - IIq;
integral_of_error_q <= IIq + error_q;
error_q <= EQ - IIq;
U_q <= KPP * error_q + KII * integral_of_error_q;
end
always @(posedge S_AXI_ACLK) begin
// error_d <= target_torque - IId;
integral_of_error_d <= IId + error_d;
error_d <= ED - IId;
U_d <= KPP * error_d + KII * integral_of_error_d;
end                                                                         
endmodule
